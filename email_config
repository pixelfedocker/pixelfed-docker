```markdown
## Email Configuration

### A. Configure DNS Records
Before setting up the email server, add these DNS records to your domain:

```bash
# Add to your domain's DNS settings
# 1. MX Record
Type: MX
Host: @
Points to: mail.yourdomain.com
Priority: 10

# 2. SPF Record
Type: TXT
Host: @
Value: "v=spf1 mx a:mail.yourdomain.com -all"

# 3. DKIM Record (will be generated later)
Type: TXT
Host: mail._domainkey
Value: [Generated during setup]
```

### B. Update Pixelfed Environment
Update your `.env` file with email settings:

```env
# Email Configuration
MAIL_DRIVER=smtp
MAIL_HOST=mailserver
MAIL_PORT=587
MAIL_USERNAME=system@yourdomain.com
MAIL_PASSWORD=your-secure-password
MAIL_ENCRYPTION=tls
MAIL_FROM_ADDRESS=system@yourdomain.com
MAIL_FROM_NAME="${APP_NAME}"

# Additional Email Settings
MAIL_REPORT_DRIVER=mail
MAIL_REPORT_TO=reports@yourdomain.com
```

### C. Create Email Setup Script
```bash
#!/bin/bash
# setup-pixelfed-email.sh

# Create required directories
mkdir -p {mailserver/{data,state,logs,config},scripts}

# Function to create email account
create_email_account() {
    local email=$1
    local password=$2
    local purpose=$3
    
    echo "Creating $purpose email: $email"
    docker run --rm \
        -e MAIL_USER=$email \
        -e MAIL_PASS=$password \
        -v "$PWD/mailserver/config":/tmp/docker-mailserver \
        docker.io/mailserver/docker-mailserver:latest \
        /bin/sh -c 'echo "$MAIL_USER|$(doveadm pw -s SHA512-CRYPT -u $MAIL_USER -p $MAIL_PASS)"' >> mailserver/config/postfix-accounts.cf
}

# Create system emails
create_email_account "system@yourdomain.com" "system-pass" "System"
create_email_account "reports@yourdomain.com" "reports-pass" "Reports"
create_email_account "security@yourdomain.com" "security-pass" "Security"

# Generate DKIM keys
docker run --rm \
    -v "$PWD/mailserver/config":/tmp/docker-mailserver \
    docker.io/mailserver/docker-mailserver:latest \
    generate-dkim-config

echo "Email setup complete. Check mailserver/config/opendkim/keys/domain.tld/mail.txt for DKIM record"
```

## Email Testing & Verification

### A. Create Test Script
```bash
#!/bin/bash
# test-pixelfed-email.sh

echo "Testing Pixelfed email configuration..."

# Test system email
docker exec -i pixelfed php artisan test:mail

# Test email server
docker exec mailserver /bin/sh -c 'sendmail -t <<EOF
From: system@yourdomain.com
To: your-personal-email@example.com
Subject: Pixelfed Email Test

This is a test email from your Pixelfed instance.
EOF'

# Check logs
echo "Checking mail logs..."
docker exec mailserver tail -f /var/log/mail.log
```

### B. Monitoring Script
```bash
#!/bin/bash
# monitor-pixelfed-email.sh

LOG_DIR="./logs/email"
mkdir -p $LOG_DIR

# Function to send alert
send_alert() {
    local subject="$1"
    local message="$2"
    docker exec mailserver /bin/sh -c "echo '$message' | mail -s '$subject' admin@yourdomain.com"
}

# Check email queue
QUEUE_SIZE=$(docker exec mailserver mailq | grep -c "^[A-F0-9]")
if [ $QUEUE_SIZE -gt 10 ]; then
    send_alert "Email Queue Alert" "Large email queue detected: $QUEUE_SIZE messages"
fi

# Check disk space
DISK_USAGE=$(df -h | grep /var/mail | awk '{print $5}' | cut -d'%' -f1)
if [ $DISK_USAGE -gt 80 ]; then
    send_alert "Disk Space Alert" "Mail server disk usage at ${DISK_USAGE}%"
fi

# Log statistics
date >> "$LOG_DIR/stats.log"
docker exec mailserver pflogsumm /var/log/mail.log >> "$LOG_DIR/stats.log"
```

## Troubleshooting Email Issues

### Common Problems and Solutions

1. Emails Not Sending
```bash
# Check mail server status
docker-compose ps mailserver

# View recent logs
docker-compose logs --tail=100 mailserver

# Check mail queue
docker exec mailserver mailq

# Clear mail queue if needed
docker exec mailserver postsuper -d ALL
```

2. DNS Issues
```bash
# Verify DNS records
dig MX yourdomain.com
dig TXT yourdomain.com  # Check SPF
dig TXT mail._domainkey.yourdomain.com  # Check DKIM

# Test email server connection
telnet mail.yourdomain.com 587
```

3. Authentication Problems
```bash
# Test SMTP authentication
docker exec mailserver /bin/sh -c 'nc -zv localhost 587'

# Verify credentials
docker exec mailserver /bin/sh -c 'doveadm auth test system@yourdomain.com'
```

## Email Maintenance

### Daily Tasks
```bash
# Create daily maintenance script
cat > email-daily-maintenance.sh << 'EOF'
#!/bin/bash

# Update virus definitions
docker exec mailserver freshclam

# Clean mail queue
docker exec mailserver postsuper -d ALL deferred

# Log statistics
docker exec mailserver pflogsumm /var/log/mail.log > /var/log/daily-mail-stats.log

# Backup configuration
tar -czf mailserver-config-$(date +%Y%m%d).tar.gz mailserver/config/
EOF
```

### Weekly Tasks
```bash
# Create weekly maintenance script
cat > email-weekly-maintenance.sh << 'EOF'
#!/bin/bash

# Rotate logs
docker exec mailserver logrotate /etc/logrotate.conf

# Clean old emails
find mailserver/data -type f -mtime +90 -delete

# Update container
docker-compose pull mailserver
docker-compose up -d mailserver
EOF
```

[Previous: Part 3 - Maintenance & Backups](#part-3-maintenance-backup--recovery-and-data-stewardship) | [Next: Part 5 - Advanced Configuration](#part-5-advanced-configuration)

I'll continue with the advanced email configuration and integration sections.

```markdown
## Advanced Email Configuration

### A. Email Security Hardening
```bash
# Create security configuration file
cat > mailserver/config/postfix-security.cf << 'EOF'
# Restrict relay access
smtpd_relay_restrictions = 
    permit_mynetworks,
    permit_sasl_authenticated,
    reject_unauth_destination

# Anti-spam measures
smtpd_recipient_restrictions =
    reject_unknown_sender_domain,
    reject_unknown_recipient_domain,
    reject_unauth_pipelining

# Rate limiting
smtpd_client_connection_rate_limit = 50
smtpd_client_message_rate_limit = 100
EOF
```

### B. Integration with Pixelfed Events
```php
# Create custom email notifications
# File: config/pixelfed-notifications.php

return [
    'notifications' => [
        // User Events
        'user.signup' => [
            'email' => true,
            'template' => 'emails.admin.new_user',
            'to' => 'admin@yourdomain.com'
        ],
        
        // Storage Events
        'storage.warning' => [
            'email' => true,
            'threshold' => 80, // Percentage
            'template' => 'emails.system.storage_warning'
        ],
        
        // Security Events
        'security.login_failed' => [
            'email' => true,
            'threshold' => 5, // Failed attempts
            'template' => 'emails.security.login_attempts'
        ]
    ]
];
```

### C. Email Templates
```html
<!-- Create email templates -->
<!-- File: resources/views/emails/system/storage_warning.blade.php -->
<!DOCTYPE html>
<html>
<head>
    <title>Storage Warning</title>
</head>
<body>
    <h2>Storage Space Warning</h2>
    <p>Your Pixelfed instance is running low on storage:</p>
    <ul>
        <li>Current Usage: {{ $usage }}%</li>
        <li>Available Space: {{ $available }}</li>
        <li>Total Space: {{ $total }}</li>
    </ul>
    <p>Please take action to prevent service interruption.</p>
</body>
</html>
```

### D. Advanced Monitoring Setup
```yaml
# Create monitoring configuration
# File: config/email-monitoring.yml

monitoring:
  checks:
    - name: smtp_connection
      interval: 5m
      alert_after: 15m
      
    - name: queue_size
      max_size: 100
      alert_threshold: 80
      
    - name: delivery_delay
      max_delay: 30m
      
  alerts:
    email:
      - admin@yourdomain.com
      - security@yourdomain.com
    
    metrics:
      - type: prometheus
        port: 9090
```

### E. Backup and Recovery
```bash
#!/bin/bash
# advanced-email-backup.sh

# Set variables
BACKUP_DIR="/var/backups/mailserver"
RETENTION_DAYS=30
DATE=$(date +%Y%m%d_%H%M%S)

# Create backup directory structure
mkdir -p "$BACKUP_DIR/$DATE"/{config,data,state,logs}

# Stop mail service
docker-compose stop mailserver

# Backup mail data with progress
rsync -ah --progress \
    ./mailserver/data/ \
    "$BACKUP_DIR/$DATE/data/"

# Backup configurations
cp -r ./mailserver/config/* "$BACKUP_DIR/$DATE/config/"

# Backup state
cp -r ./mailserver/state/* "$BACKUP_DIR/$DATE/state/"

# Compress backup
tar -czf "$BACKUP_DIR/mailserver_$DATE.tar.gz" \
    "$BACKUP_DIR/$DATE"

# Start mail service
docker-compose start mailserver

# Cleanup old backups
find "$BACKUP_DIR" -type d -mtime +$RETENTION_DAYS -exec rm -rf {} \;
```

### F. Performance Tuning
```bash
# Create performance tuning script
cat > tune-email-server.sh << 'EOF'
#!/bin/bash

# Update Postfix configuration for performance
docker exec mailserver postconf -e \
    "default_process_limit=100" \
    "minimal_backoff_time=300s" \
    "maximal_backoff_time=3600s" \
    "maximal_queue_lifetime=5d" \
    "queue_run_delay=300s"

# Update memory limits
docker exec mailserver sysctl -w \
    net.core.somaxconn=1024 \
    net.ipv4.tcp_max_syn_backlog=1024

# Update SpamAssassin settings
docker exec mailserver sed -i \
    's/required_score.*/required_score 5.0/' \
    /etc/spamassassin/local.cf

EOF

chmod +x tune-email-server.sh
```

### G. Logging and Analytics
```python
#!/usr/bin/env python3
# email-analytics.py

import re
import sys
from collections import defaultdict
from datetime import datetime, timedelta

def parse_mail_log(logfile):
    stats = defaultdict(int)
    pattern = r'(\w{3}\s+\d+\s+\d{2}:\d{2}:\d{2}).*status=(\w+)'
    
    with open(logfile, 'r') as f:
        for line in f:
            match = re.search(pattern, line)
            if match:
                timestamp, status = match.groups()
                stats[status] += 1
    
    return stats

def generate_report(stats):
    report = [
        "Email Server Analytics Report",
        "===========================",
        f"Generated: {datetime.now()}",
        "",
        "Delivery Statistics:",
        "-----------------"
    ]
    
    for status, count in stats.items():
        report.append(f"{status}: {count}")
    
    return "\n".join(report)

if __name__ == "__main__":
    logfile = sys.argv[1]
    stats = parse_mail_log(logfile)
    print(generate_report(stats))
```

### H. Automation Scripts
```bash
# Create automation script for common tasks
cat > email-automation.sh << 'EOF'
#!/bin/bash

function check_dkim() {
    docker exec mailserver opendkim-testkey \
        -d $(hostname -d) -s mail -vvv
}

function rotate_logs() {
    docker exec mailserver logrotate -f /etc/logrotate.d/maillog
}

function update_virus_db() {
    docker exec mailserver freshclam
}

function optimize_db() {
    docker exec mailserver sa-learn --sync
}

case "$1" in
    "dkim")     check_dkim ;;
    "logs")     rotate_logs ;;
    "virus-db") update_virus_db ;;
    "optimize") optimize_db ;;
    *)          echo "Usage: $0 {dkim|logs|virus-db|optimize}" ;;
esac
EOF

chmod +x email-automation.sh
```
